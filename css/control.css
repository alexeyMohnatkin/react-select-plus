/*
 Control
 ------------------------------
*/
@import './spinner.css';

.Select {
	position: relative;

	/*preferred box model*/
	&,
	& div,
	& input,
	& span {
		box-sizing: border-box;
	}

	/*handle disabled state*/
	&.isDisabled > .control {
		background-color: var(--select-input-bg-disabled);
		&:hover {
			box-shadow: none;
		}
	}
	&.isDisabled .arrowZone {
		cursor: default;
		pointer-events: none;
	}
}

/*base*/

.control {
	background-color: var(--select-input-bg);
	border-color: var(--select-input-border-color);
	border-radius: var(--select-input-border-radius);
	border: var(--select-input-border-width) solid var(--select-input-border-color);
	color: var(--select-text-color);
	cursor: default;
	display: table;
	border-spacing: 0;
	border-collapse: separate;
	height: var(--select-input-height);
	outline: none;
	overflow: hidden;
	position: relative;
	width: 100%;

	&:hover {
		box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);
	}

	& .input:focus {
		outline: none;
	}
}

.isSearchable {
	&.isOpen > .control {
		cursor: text;
	}
}

.isOpen > .control {
	border-bottom-radius: 0;
	background: var(--select-input-bg);
	border-color: var(--select-input-border-color);

	/*flip the arrow so its pointing up when the menu is open*/
	& .arrow {
		top: -2px;
		border-color: transparent transparent var(--select-arrow-color);
		border-width: 0 var(--select-arrow-width) var(--select-arrow-width);
	}
}

.isSearchable {
	&.isFocused:not(.isOpen) > .control {
		cursor: text;
	}
}

.isFocused:not(.isOpen) > .control {
	border-color: var(--select-input-border-focus);
	box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1), 0 0 5px -1px fade(var(--select-input-border-focus), 50%);
}

/*placeholder*/
.placeholder,
.single > .control .value {
	bottom: 0;
	color: var(--select-input-placeholder);
	left: 0;
	line-height: var(--select-input-internal-height);
	padding-left: var(--select-padding-horizontal);
	padding-right: var(--select-padding-horizontal);
	position: absolute;
	right: 0;
	top: 0;

	/*crop text*/
	max-width: 100%;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

.hasValue.single > .control .value,
.hasValue.isPseudoFocused.single > .control .value {
	& .valueLabel {
		color: var(--select-text-color);
	}
	& a.value-label {
		cursor: pointer;
		text-decoration: none;

		&:hover,
		&:focus {
			color: var(--select-link-hover-color);
			outline: none;
			text-decoration: underline;
		}
	}
}


/*the <input> element users type in*/

.input {
	/*inherits `display: inline-block` from "react-input-autosize"*/
	height: var(--select-input-internal-height);
	padding-left: var(--select-padding-horizontal);
	padding-right: var(--select-padding-horizontal);
	vertical-align: middle;

	& > input {
		background: none transparent;
		border: 0 none;
		box-shadow: none;
		cursor: default;
		display: inline-block;
		font-family: inherit;
		font-size: inherit;
		/*height: $select-input-internal-height;*/
		margin: 0;
		outline: none;
		/*padding: 0;*/

		/* For IE 8 compatibility */
		line-height: 14px;
		padding: calc((var(--select-input-internal-height) - 14) / 2 - 2) 0 calc((var(--select-input-internal-height) - 14) / 2 + 2);

		-webkit-appearance: none;

		& .isFocused & {
			cursor: text;
		}
	}

}

/*fake-hide the input when the control is pseudo-focused*/
.hasValue.isPseudoFocused .input {
	opacity: 0;
}

/*fake input*/
.control:not(.isSearchable) > .input {
	outline: none;
}


/*the little cross that clears the field*/

.clearZone {
	animation: Select-animation-fadeIn 200ms;
	color: var(--select-clear-color);
	cursor: pointer;
	display: table-cell;
	position: relative;
	text-align: center;
	vertical-align: middle;
	width: var(--select-clear-width);

	&:hover {
		color: var(--select-clear-hover-color);
	}
}
.clear {
	display: inline-block;
	font-size: var(--select-clear-size);
	line-height: 1;
}
.multi .clearZone {
	width: var(--select-clear-width);
}

.multi .multi-value-wrapper {
  display: inline-block;
}
.Select .aria-only {
	display: inline-block;
	height: 1px;
	width: 1px;
	margin: -1px;
	clip: rect(0,0,0,0);
	overflow: hidden;
}


/*arrow indicator*/

.arrowZone {
	cursor: pointer;
	display: table-cell;
	position: relative;
	text-align: center;
	vertical-align: middle;
	width: calc(var(--select-arrow-width) * 5);
	padding-right: var(--select-arrow-width);
}

.arrow {
	border-color: var(--select-arrow-color) transparent transparent;
	border-style: solid;
	border-width: var(--select-arrow-width) var(--select-arrow-width) calc(var(--select-arrow-width) / 2);
	display: inline-block;
	height: 0;
	width: 0;
	position: relative;
}
.isOpen .arrow,
.arrowZone:hover > .arrow {
	border-top-color: var(--select-arrow-color-hover);
}



/*
Animation
------------------------------
*/
/*fade in*/
@keyframes Select-animation-fadeIn {
	from { opacity: 0; }
	to { opacity: 1; }
}
